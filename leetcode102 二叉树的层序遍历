给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。 

示例：
二叉树：[3,9,20,null,null,15,7] ,

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]

代码示意：
一、两个数组queue和arr同步操作 实现当前层节点的入队和节点值的入队
var levelOrder = function(root) {
    let ans = [],queue= [],prev = [],arr=[],node = root;
    if(!node) return ans;
    queue.push(node);
    arr.push(node.val);
    while(queue.length){
        ans.push(arr);
        prev = queue;
        queue = [];
        arr=[];
        for(let node of prev){
            if(node.left){
                queue.push(node.left);
                arr.push(node.left.val);
            }
            if(node.right){
                queue.push(node.right);
                arr.push(node.right.val);
            } 
        }  
    }
    return ans;
};
二、更加规范的广度优先遍历（迭代）
var levelOrder = function(root) {
    if(!root) return [];
    let node = root,ans = [],queue = [node];
    
    while(queue.length){ 
        let cur = []; //记录当前层queue的节点的值
        let temp = []; //用来存放下一层节点
        while(queue.length){
            node = queue.shift(); //执行头部出队操作
            cur.push(node.val);
            if(node.left) temp.push(node.left);
            if(node.right) temp.push(node.right);
        }  
        ans.push(cur);
        queue = temp;
    }
    return ans;
};
三、活用深度优先遍历(递归)
var levelOrder = function(root) {
    if(!root) return [];
    let ans = [];
    var dep = function(node,depth){
        if(!node) return ;
        ans[depth] = ans[depth]?ans[depth] : [];
        ans[depth].push(node.val);
        dep(node.left,depth+1);
        dep(node.right,depth+1);
    }
    dep(root,0);
    return ans;
};

